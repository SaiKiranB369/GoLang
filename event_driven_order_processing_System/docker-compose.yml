version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Initialize databases
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d orders"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:3.4
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,EXTERNAL://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    ports:
      - "9093:9093"
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  order-service:
    build:
      context: .
      dockerfile: order-service/dockerfile
    environment:
      DB_HOST: postgres
      DB_USER: user      # Explicitly set username
      DB_PASSWORD: password  # Explicitly set password
      DB_NAME: orders
      KAFKA_BROKERS: kafka:9092
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network

  payment-service:
    build:
      context: .
      dockerfile: payment-service/dockerfile
    environment:
      DB_HOST: postgres
      DB_USER: user      # Explicitly set username
      DB_PASSWORD: password  # Explicitly set password
      DB_NAME: payments
      KAFKA_BROKERS: kafka:9092
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network

  notification-service:
    build:
      context: .
      dockerfile: notification-service/dockerfile
    environment:
      REDIS_ADDR: redis:6379
      KAFKA_BROKERS: kafka:9092
    ports:
      - "8082:8080"
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge